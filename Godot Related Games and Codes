#Creating Menu
1. Create a simple 2d node called "control".
2. Make ColoRect, Label, Button it's child nodes.
3. Then adjust ColoRect by changing its color for background.
4. Give Label node some Text info.
5. Adjust your label node position in the 2d scene view according to need.
6. Attach Script to button(as many you have created to) and create signals to those buttons that connect 
to themselves, and write down below code.

#codeStart
//for button Play
extends Button

func _ready():
  pass

func _on_buttontitleplay_pressed():
  get_tree().change_scene("res://Assets/Level.tscn")

#codeEnd

#codeStart
//for button Quit
extends Button

func _ready():
	pass

func _on_buttontitlequit_pressed():
	get_tree().quit()

#codeEnd

6. Save it as a default scene.

#Creating Level
Create level scene as you like you mostly don't need to write script.

#Create Player
Take a model from anywhere you like or just make a box you player.
Make a separate 3d scene for the player. Create a KinematicBody node and name it as player.
Create "CollisionShape" and "MeshInsance" as its child nodes and adjust them according to your need.
Add gd script to you player and write below code...

#codeStart
//for basic movement of player
extends KinematicBody

var velocity = Vector3(0,0,0)
const SPEED = 10

func _ready():
	pass

func _physics_process(_delta):
	if Input.is_action_pressed("ui_left"):
		velocity.x = -SPEED
	elif Input.is_action_pressed("ui_right"):
		velocity.x = SPEED
	else:
		velocity.x = lerp(velocity.x,0,0.1)
	if Input.is_action_pressed("ui_up"):
		velocity.z = -SPEED
	elif Input.is_action_pressed("ui_down"):
		velocity.z = SPEED
	else:
		velocity.z = lerp(velocity.z,0,0.1)
	move_and_slide(velocity)

#codeEnd
Finally save it as separate Player.tscn scene.

#Creating Enemy
Create Enemy similar to player but Instead of making an KinematicBody node make it an area node
and make meshInstance your first child node and collision shape you 2nd child node.
then save it.

In the level scene add your player and make spatial node as its child, we will use it as camera target for the interpolatedCamera node.
Create an InterpolatedCamera node child to level node and assign that spatial node as target node in the inspector pannel and adjust its speed to track the player.

Add Enemy node/scene to you level/scene's root node.
Create signal as body_entered() and connect it to Player node/scene. You will find signals in the node Tab.
Inside the player's script write below code...

#codeStart
// to get the interaction with the player if interacted then decrease it's life or kill it and send it to the game Over scene.
func _on_Enemy1_body_entered(body):
	if body.name == "Player":
		get_tree().change_scene("res://Assets/GameOver.tscn")

#codeEnd

if you want to create more enemies then you need to repeat above process again, I mean for 
the scripting and signaling no need to create a separate enemy scene.

#Creating Game Over Scene
create Game over Scene same as Menu scene there is nothing more to it.

#Creating Game Won Scene
Create it same as Menu scene just make changes that you'l like.
#Creating Counter for tracking coins count
First create a control node.
create two child Label nodes.
make one as counter and other as coins. Attach script to counter node.
Make Timer as child node to counter Node or Label node.

Write below code in the counter's script...

#codeStart
extends Label

var coins = 0

func _ready():
	text = String(coins)


func _on_Coin_Collected():
	coins += 1
	_ready()
	if coins == 24:
		$Timer.start()


func _on_Timer_timeout():
	get_tree().change_scene("res://Assets/GameWon.tscn")

#codeEnd

#Creating Coins
take an Area node. Create MeshInstance, CollisionShape, Timer and Animaition Player as its child nodes.
Then Make a timeout signal of Timer Node and connect it to Area node and write below code in the script attached to Area node (attach script to area node first).

#codeStart
extends Area

signal coinCollected

func _ready():
	pass

func _physics_process(_delta):
	rotate_y(deg2rad(3))


func _on_Coin_body_entered(body):
	if body.name == "Player":
		$AnimationPlayer.play("CoinAnim")
		$Timer.start()
	


func _on_Timer_timeout():
	emit_signal("coinCollected")
	queue_free()

#codeEnd

Inside the AnimationPlayer node create animation you like.
After that while you will be adding it in the level scene, create a spatial node,
inside it create another spatial node name it Coins>CoinsHolder inside coinsHolder add your coin scenes.
and attach the same script to the coin node that was created already in its scene.

